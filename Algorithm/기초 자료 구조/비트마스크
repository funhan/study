# 비트마스크

정수의 이진수 표현을 자료 구조로 쓰는 기법을 `비트마스크`라고 함. 64bit 정수를 사용할 시 `ull`을 써야함.

## 장점
* 더 빠른 수행 시간 
* 더 간결한 코드
* 더 작은 메모리 사용량
* 연관 배열을 배열로 대체 ( ex. map<vector<bool>, int> 을 int[]로 나타낼 수 있음.)
  
## 용어
* bit : 이진수의 한 자리.
* most significant bit : 최상위 비트. 2^(n-1) 에 해당하는 비트
* least significant bit : 최하위 비트 2^0 에 해당하는 비트

## 비트 연산자
* & (and), | (or), ^ (xor), ~ (not), << (왼쪽 shift), >> (오른쪽 shift)

## 기본 연산

* n개의 1 만들기 : `int a = (1 << n) - 1;`

* n번째 1로 설정 : `int a = a | (1 << n);`

* n번째 1인지 확인 : `if( a & (1 << n) )`

* n번째 0으로 설정 : `a = a & ~(1 << n);`

* n번째 원소 토글 : `a = a ^ (1 << n);`

* 두 집합에 대한 연산

`int added = (a | b); // a와 b의 합집합`

`int intersection = (a & b); // a와 b의 교집합`

`int removed = (a & ~b); // a에서 b를 뺀 차집합`

`int toggled = (a ^ b); // a와 b 중 하나에만 포함된 원소들의 집합`

* 1의 갯수 세기 (집합의 크기)
```
int bitCount(int x) {
  if(x == 0) return 0;
  return x % 2 + bitCount(x / 2);
}
```
gcc/g++ : __builtin_popcount(x), 64bit : __builtin_popcountll(x)

visual C++ : __popcnt(x), 64bit : __popcnt64(x)

* 최소 원소 찾기 (끝에 붙어있는 0의 갯수, 켜져있는 최하위 비트의 번호) : `int count = (a & -a);`

gcc/g++ : __builtin_ctz(x), 64bit : __builtin_ctzll(x)

visual C++ : _BitScanForward(&index, x)

* 최소 원소 삭제 : `a = (a & (a - 1));`

* 모든 부분 집합 순회
```
for(int subset = x; subset; subset = ((subset - 1) & x)) {
  // subset은 x의 부분집합
}
```
