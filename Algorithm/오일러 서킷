# 오일러 서킷

그래프의 모든 `간선`을 정확히 한 번씩 지나서 시작점으로 돌아오는 경로를 의미. 예를 들어 한붓 그리기가 있음. 이는 방향, 무방향 그래프 모두에서 해결 가능.

## 무방향 그래프에서의 오일러 서킷

무방향 그래프에서의 오일러 서킷이 존재할 수 없는 경우는 다음과 같음.

1. 그래프의 간선들이 두 개 이상의 컴포넌트로 나뉘어 있는 경우.
	- 정점이 둘 이상의 컴포넌트로 나뉘어 진게 아닌 간선이 나뉘어져있는 것임.
2. 모든 정점들의 차수가 짝수가 아닌 경우.
	- 들어왔다가 나가야 하므로 모든 정점의 차수가 짝수개여야 오일러 서킷이 존재할 수 있음.

따라서 어떤 그래프의 모든 정점이 짝수점이고, 모든 간선이 하나의 컴포넌트에 포함되어 있을 때 항상 오일러 서킷을 찾을 수 있음.

### 오일러 서킷을 찾는 알고리즘

임의의 정점 u에서 시작해 아직 따라가지 않은 간선 중 하나를 따라가는 작업을 반복하다가, 더 이상 따라갈 간선이 없는 경우 다시 되돌아 감. 이를 모든 간선을 지날때까지 반복.

### 알고리즘 코드 - O(|V||E|)
```cpp
// 그래프의 인접 행렬 표현. adj[i][j] = i와 j사이의 간선의 수
vector<vector<int>> adj;
// 무방향 그래프의 인접 행렬 adj가 주어질 때 오일러 서킷 계산
// 결과로 얻어지는 circuit을 뒤집으면 오일러 서킷을 얻을 수 있음.
void getEulerCircuit(int here, vector<int>& circuit) {
	for(int there = 0;there < adj.size();++there) {
		while(adj[here][there] > 0) {
			adj[here][there]--; // 양쪽 간선 모두 삭제
			adj[there][here]--;
			getEuler(there, circuit);
		}
	}
	circuit.push_back(here);
}
```

### 오일러 트레일

그래프의 모든 간선을 정확히 한 번씩 지나지만, 시작점과 끝 점이 다른 경로를 의미함.
오일러 서킷과 비슷하지만, 오일러 트레일의 시작점과 끝점은 홀수점이고 나머지 정점들은 짝수점.


## 방향 그래프에서의 오일러 서킷


무방향 그래프에서와 비슷하지만, 간선에 방향이 존재하기 때문에 각 정점으로 들어오는 간선의 수와 나가는 간선의 수가 같아야 함.

### 오일러 서킷 또는 트레일 찾는 코드

```cpp
// 방향 그래프의 인접 행렬 adj가 주어질 때 오일러 서킷 혹은 트레일을 계산
void getEulerCircuit(int here, vector<int>& circuit) {
	for(int there = 0;there < adj.size(); ++there) {
		while(adj[here][there] > 0) {
			adj[here][there]--; // 간선 삭제
			gerEulerCircuit(there, circuit);
		}
	}
	circuit.push_back(here);
}

// 현재 그래프의 오일러 트레일이나 서킷을 반환
vector<int> getEulerTrailOrCircuit() {
	vector<int> circuit;
	// 우선 트레일을 찾음 : 시작점이 존재하는 경우	for(int i=0;i<adj.size();++i) {
		if(outdegree[i] == indegree[i] + 1) {
			getEulerCircuit(i, circuit);
			return circuit;
		}
	}
	// 아니면 서킷이니, 간선에 인접한 아무 정점에서나 시작
	for(int i=0;i<adj.size();++i) {
		if(outdegree[i]) {
			getEulerCircuit(i, circuit);
			return circuit;
		}
	}
	// 모두 실패한 경우 빈 배열 반환
	return circuit;
}
```















